#!/bin/bash
# v1.2.0

# N.b. This program favors early termination (with `exit`) over multiple levels of nested
# conditionals (i.e. if-then-else expressions). That's why there's very little indendation
# and many occurances of logical "and" (&&) and "or" (||) operators. Modifications should stick
# to this style.

# Exit immediately if any line that isn't an expression or a pipeline fails
set -e

function get_field_from_json {
  echo "$1" | grep "\"$2\"" | sed "s/  \"$2\": \"\(.*\)\",$/\1/"
}

function git_config_clear_github_username {
  git config --global --remove-section github 2>/dev/null || true
}

function git_config_add_github_username {
  git_config_clear_github_username
  while [ $# -gt 0 ]
  do
    git config --global --add github.username "$1"
    shift
  done
}

function clear_github_user_info {
  git config --global --remove-section user
  git_config_clear_github_username
}

function flush_credential_cache {
  # Enforce the use of git's credential cache - this means that github credentials used for a
  # fetch/push will be cached for 9hrs
  git config --global credential.helper 'cache --timeout=32400'
  # Flush any existing cached credentials because invocation of this script means we are changing
  # github users
  git credential-cache exit
}

function remove_hub_credential_file {
  if [ -e ~/.config/hub ]; then rm ~/.config/hub; fi
}

# Given a github username, fetch json-encoded attributes from the public api
function user_json {
  local username=$1
  if [ $SGU_API_KEY ]; then
    local json=`curl -H "Authorization: token $SGU_API_KEY" -s https://api.github.com/users/$username`
  else
    local json=`curl -s https://api.github.com/users/$username`
  fi
  test "Not Found" = "$(get_field_from_json "$json" message)" && {
    echo "Couldn't find $username on GitHub" >&2
    exit 1
  }
  echo "$json"
}

function join {
  separator="${1}"
  shift
  words=("${@}")
  regex="$( printf "${separator}%s" "${words[@]}" )"
  regex="${regex:${#separator}}" # remove leading separator
  echo "${regex}"
}

function display_git_authors {
  c_purple='\x1B[0;35m'
  c_reset='\x1B[0m'
  echo -e "Git author[s] have been set to: ${c_purple}`git config --global user.name`${c_reset}"
}

function unset_local_gitconfig_author {
  if git config --local user.name > /dev/null; then
    git config --remove-section user
  fi
}

function convert_name_to_initials {
  initials=()
  for name in $1; do
      local initial=`echo $name | cut -c 1`
      initials+=("$initial")
  done
  initials=`join "" "${initials[@]}"`
  echo "${initials}"
}

# First arg is "out" - clear existing author config
test 'out' = $1 && {
  # Always remove the hub crendential file
  remove_hub_credential_file
  flush_credential_cache

  if git config --global user.name > /dev/null; then
    clear_github_user_info
    exit
  else
    exit 0
  fi
}

# No args given - show command usage and existing author config
test $1 || {
  echo "\
Set git username(s):
  git pair   <github-username>
  git pair <github-username> [and] <github-username>...

Examples:

  $ git pair seanknox
  $ git pair seanknox ryanswood

Sign out:
  git pair out"
  current_user_name=`git config --global user.name`
  current_user_email=`git config --global user.email`

  echo
  echo "\
For this to work you must have filled out the name and email fields in:
https://github.com/settings/profile"

  test "$current_user_name" && echo && echo "\
Current name:  $current_user_name"
  test "$current_user_name" && echo "\
Current email: $current_user_email"
  exit
}

# One arg given - set the git author to one person
! test $2 && {
  flush_credential_cache
  unset_local_gitconfig_author
  remove_hub_credential_file

  # Fetch user attribs from github
  user_json=`user_json $1`
  # Parse name and email
  name=`get_field_from_json "$user_json" name`
  test -z "$name" && name=`get_field_from_json "$user_json" login`

  initials=`convert_name_to_initials "$name"`

  email=`get_field_from_json "$user_json" email`
  # Set git author
  git config --global user.name  "$name"
  git config --global user.email "$email"
  git config --global user.initials "$initials"
  git_config_add_github_username $1

  display_git_authors
  exit
}

# More than one arg given - set the git author to a pair
{
  flush_credential_cache
  unset_local_gitconfig_author
  remove_hub_credential_file

  # clean "and" from input args
  argv=("$@")
  users=`echo "${argv[@]}" | xargs -n1 echo | sed '/^and$/d'`

  #ensure consistent ordering of author names regardless of the order given in the args
  sorted_usernames=($(printf '%s\n' "${users[@]}"|sort))

  sorted_names=()
  sorted_initials=()

  # Fetch user attribs from github and parse them
  for sorted in "${sorted_usernames[@]}"; do
    json=`user_json $sorted`
    name=`get_field_from_json "$json" name`
    test -z "$name" && name=`get_field_from_json "$json" login`

    initials=`convert_name_to_initials "$name"`

    sorted_names+=("$name")
    sorted_initials+=("$initials")
  done

  #Create display name
  all_names=`join " & " "${sorted_names[@]}"`
  all_usernames=`join "+" "${sorted_usernames[@]}"`
  all_initials=`join " " "${sorted_initials[@]}"`

  # Create email
  email="pair+$all_usernames@${ORG_DOMAIN:-statenwood.com}"

  # Set git author
  git config --global user.name  "$all_names"
  git config --global user.email "$email"
  git config --global user.initials "$all_initials"
  git_config_add_github_username "${sorted_usernames[@]}"

  display_git_authors
}
